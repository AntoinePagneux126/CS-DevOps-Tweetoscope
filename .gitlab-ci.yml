stages :  ## parallezing tasks
  - test_py
  - create_docker_image
  - create_docs




create_docker_image_gaml_job:
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image GAML build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/gengaml -f DockerFile.Gen_GAML .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/gengaml
    - echo " Image pushed !"

create_docker_image_collector_job:
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Collector build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/collector -f DockerFile.Collector .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/collector
    - echo " Image pushed !"

create_docker_image_estimator_py_job:
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Estimator build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/estimator -f DockerFile.Estimator .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/estimator
    - echo " Image pushed !"


create_docker_image_predictor_py_job:
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Predictor build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/predictor -f DockerFile.Predictor .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/predictor
    - echo " Image pushed !"


create_docker_image_learner_py_job:
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Learner build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/learner -f DockerFile.Learner .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/learner
    - echo " Image pushed !"



test_py_job:
  stage: test_py
  allow_failure: true
  image: python:3.7
  coverage: '/TOTAL.*\s+(\d+%)$/'
  before_script: 
    - python3 --version
    - pip install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip --version
    - pip install pytest pytest-cov
    - pip install pytest-html
    - pip install -r requirements.txt
  script: 
    - echo "starting test for python coverage ... "
    # to have a html file but the badge would not work
    # - python3 -m pytest --cov-report=html --cov=Python_files tests/
  
    - python3 -m pytest --cov=Python_files tests/
    - echo "Code coverage finished ..."
  artifacts: 
    untracked : false
    paths :
      - coverage/index.html
    expire_in: 60 days


pylint_job:
  stage: test_py
  variables:
    CI_DEBUG_TRACE: "true"
  allow_failure: true
  image: python:3.7

  before_script: 
    - python3 --version
    - pip install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip --version
    - pip install pylint pylint-exit anybadge tee
    - pip install -r requirements.txt
  script: 
    - mkdir ./pylint
    - echo "starting lint for python code ... "
    - set -o noclobber
    - pylint -ry -sy Python_files/*.py  --output-format=text --output=Rapport_Pylint/report.txt || pylint-exit $?
    - pylint tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=PYLINT_SCORE --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
  # artifacts:
  #   untracked: false
  #   expire_in: 60 days
  #   paths : 
  #     - Rapport_Pylint/report.txt
  artifacts:
    paths:
      - ./pylint/


create_docs_job:
  stage: create_docs
  variables:
    CI_DEBUG_TRACE: "true"
  allow_failure: true
  image: python:3.7

  before_script: 
    - python3 --version
    - pip install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip --version
    - pip install Sphinx 
    - pip install sphinx-rtd-theme
    - pip install -r requirements.txt
  script: 
    - echo "starting docs generation for python code ... "
    - cd docs
    - sphinx-apidoc -o . ../Python_files
    - make html



    