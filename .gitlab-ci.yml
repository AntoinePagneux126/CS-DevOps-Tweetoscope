stages :
  - pylint_test
  - test_py
  - create_docker_image


create_docker_image_job:
  stage: create_docker_image
  allow_failure: true
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/gengaml -f DockerFile.Gen_GAML .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/gengaml
    - echo " Image pushed !"

test_py_job:
  stage: test_py 
  allow_failure: true
  image: python:latest
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip3"
  cache:
    paths:
      - .cache/pip3
      - venv/

  before_script: 
    - python3 --version
    # - apt-get install python3-pip
    - pip3 install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip3 --version
    - pip3 install pytest 
    - pip3 install pytest-cov
    - pip3 install -r requirements.txt
  script: 
    - echo "starting test for python coverage"
    - python3 -m pytest --cov report=html --cov=Python_files tests/
  artifacts: 
    untracked : false
    paths :
      - coverage ## correspond au nom dans la section [html] du .coveragerc
    expire_in: 60 days

pylint_test_job : 
  stage : pylint_test
  allow_failure: true
  image: python:latest

  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip3"

  cache:
    paths:
      - .cache/pip3
      - venv/
  before_script : 
    - python3 --version
    # - apt-get install python3-pip
    - pip3 install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip3 --version
    - pip3 install pylint
    - pip3 install -r requirements.txt
  script :
    - echo "starting lint for python code"
    - pylint -ry -sy Python_files/*.py >> Rapport_Pylint/report.txt