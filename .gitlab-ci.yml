stages :  ## attention penser à mettre des jobs qui peuvent s'exectuer en parallèle
  - test_py
  - create_docker_image
  ## to parallelize 
  # - pylint_test
  # - create_docker_image_gaml
  # - create_docker_image_collector
  # - create_docker_image_estimator_py
  # - create_docker_image_predictor_py


create_docker_image_gaml_job:
  # stage: create_docker_image_gaml
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image GAML build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/gengaml -f DockerFile.Gen_GAML .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/gengaml
    - echo " Image pushed !"

create_docker_image_collector_job:
  # stage: create_docker_image_collector
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Collector build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/collector -f DockerFile.Collector .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/collector
    - echo " Image pushed !"

create_docker_image_estimator_py_job:
  # stage: create_docker_image_estimator_py
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Estimator build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/estimator -f DockerFile.Estimator .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/estimator
    - echo " Image pushed !"


create_docker_image_predictor_py_job:
  # stage: create_docker_image_predictor_py
  stage : create_docker_image
  allow_failure: false
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker_files
    - echo " Image Predictor build process starts ..."
    - docker build -t $CI_REGISTRY_IMAGE/predictor -f DockerFile.Predictor .
    - echo " Docker login in process ... "
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo " Login done !"
    - docker push $CI_REGISTRY_IMAGE/predictor
    - echo " Image pushed !"



test_py_job:
  stage: test_py
  allow_failure: true
  image: python:3
  variables:
    pip_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv/


  before_script: 
    - python3 --version
    - pip install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip --version
    - pip install pytest pytest-cov
    - pip install pytest-html
    # - pip install pylint
    - pip install -r requirements.txt
  script: 
    - echo "starting test for python coverage ... "
    - ls 
    - python3 -m pytest --cov-report=html --cov=Python_files tests/
    # - python3 -m pytest --html=Rapport_coverage/rapport_cov.html --self-contained-html
    - echo "Code coverage finished ..."
    # - echo "starting lint for python code ... "
    # - pylint -ry -sy Python_files/*.py >> Rapport_Pylint/report.txt

  artifacts: 
    untracked : false
    paths :
      - coverage ## correspond au nom dans la section [html] du .coveragerc
      - coverage/index.html
    expire_in: 60 days


pylint_test_job:
  stage: test_py
  allow_failure: true
  image: python:3
  variables:
    pip_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv/


  before_script: 
    - python3 --version
    - pip install virtualenv 
    - python3 -m venv TweetoscopeVenv
    - source TweetoscopeVenv/bin/activate
    - pip --version
    - pip install pylint
    - pip install -r requirements.txt
  script: 
    - echo "starting lint for python code ... "
    - ls
    - pylint -ry -sy Python_files/*.py  -f text --output=Rapport_Pylint/report.txt



    